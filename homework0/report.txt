Online documentation from https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html was researched and I discovered the following:
-c This is used to identify that I am compiling a *.c file and should be immediately followed by the location/filename that is to be compiled.
-ansi This is equivalent to -std=c90 and really just configures the compilier to only comply with with the ISO standard of the specified year.  C was first standardized in 1989.  Using this option also means that using '//' for single line comments is disallowed (found this out the hard way) and functions that are normally built in but do not have semantics defined by ISO C (such as alloca and ffs) are not built-in functions.
-pedantic-errors This provides an error whenever base standard requires a diagnostic such as where there is undefined behavior at compile-time or other times that do not prevent compilation of programs that are valid according to the standard used.
-Wall This enables all the warnings about constructions that some may consider questionable and/or easy to avoid - even when in conjunction with macros.  This option also enables language-specific warnings.  However, some warning flags are not implied by this option while some warn about constructions that are not usually considered questionable but may want to be checked for.  Ultimately, some warn about constructors that are necessary or hard to avoid and there is no simple way to modify the code to suppress the warning.  There is a large list of warning flags enabled by this option.
-o This is used to tell the compiler where to place the output that is being produced; furthermore, this includes executables, object files, assembler files, or preprocessed C code.  If -o is not specified it will default for executable files to be named a.out, object files to be source.o, assembler files to be source.s, precompiled header file in source.suffix.gch, and all preprocessed C source on standard output. 
