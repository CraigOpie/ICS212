During the performance of testing, I found several issues that complicated data storage or sometimes caused a segmentation fault.  When adding a new user to the database: The last digit of the account number is truncated, the account number continues onto the username when the value is greater than 25 characters, the name continues onto the address when the value is greater than 25 characters, the name field produces a gap in the array when a special character is provided resulting in a unknown character in the string, the address field produces a “malloc(): corrupted top size” fault when entering more than 80 characters.  Additionally, when providing a non-number to the account number, it correctly refuses entry and asks for a valid integer, but does not recognize follow-on integers as valid and leads to a segmentation fault.

The print record function seems to work, except that the input relies on the same function for getting an integer as adding a user, so the account number last digit is missing.  Additionally, there is not a message informing the user if a record is not found.

The modify record function seems to work, except that the input relies on the same function for getting an integer as adding a user, so the account number last digit is missing.

While manually editing my .database file, vi was acting incorrectly and would not enter insert mode.  This could be due to testing being performed on a raspberry pi.  Instead, nano was used to edit the .database file.

When running the program on uhunix server, the program reads the database file and can print and modify the records and then exit and save the changes to the database file with no issues.  However, if a file is added using the program, the program generates a segmentation fault while printing and writing the database file when exiting.

Overall, the function performs well when used as intended, with the exception of the account number being truncated.  However, there is a lot of work that remains to correct the issues and get a usable program to the client.  Most likely the account number issue is due to the conversion process starting at the wrong index point.  The fgetc buffer needs to be cleared or ensure the while statement limits character acceptance following each entry to ensure values greater than the maximum array length are not carried over to the next address space.  Gaps in the array needs to be identified and closed upon accepting the invalid character for the person’s name.
